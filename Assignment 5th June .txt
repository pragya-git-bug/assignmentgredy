Assignment 5th June 

Answer1
package greedyAssignment;

/*Q1. Find the minimum sum of Products of two arrays of the same size, given that k modifications
are allowed on the first array. In each modification, one array element of the first array can either
be increased or decreased by 2.
Examples:
i/p : a[] = {1, 2, -3}
	  b[] = {-2, 3, -5}
	  k = 5
o/p : -31,
i/p : a[] = {2, 3, 4, 5, 4}
	  b[] = {3, 4, 2, 3, 2}
	  k = 3
o/p : 25*/
public class Q1 {
	public static void main(String[] args) {
		int a[] = { 1, 2, -3 };
		int b[] = { -2, 3, -5 };
		int k = 5;

		int result = minimumSumOfProducts(a, b, k);
		System.out.println(result);
	}

	private static int minimumSumOfProducts(int[] a, int[] b, int k) {
		int diff = 0, res = 0;
		int temp = 0;
		for (int i = 0; i < a.length; i++) {
			int pro = a[i] * b[i];
			res = res + pro;
			if (pro < 0 && b[i] < 0)
				temp = (a[i] + 2 * k) * b[i];
			else if (pro < 0 && a[i] < 0)
				temp = (a[i] - 2 * k) * b[i];
			else if (pro > 0 && a[i] < 0)
				temp = (a[i] + 2 * k) * b[i];
			else if (pro > 0 && a[i] > 0)
				temp = (a[i] - 2 * k) * b[i];

			int d = Math.abs(pro - temp);
			if (d > diff)
				diff = d;
		}
		return res - diff;
	}
}

Answer2
package greedyAssignment;

/*Q2. You are given n activities with their start and finish times. Select the maximum number of
activities that can be performed by a single person, assuming that a person can only work on a
single activity at a time.
Examples:
i/p : start[] = {10, 12, 20}, finish[] = {20, 25, 30}
o/p : 0 2
i/p : start[] = {1, 3, 0, 5, 8, 5}, finish[] = {2, 4, 6, 7, 9, 9};
o/p : 0 1 3 4*/
public class Q2 {
	// Prints a maximum set of activities that can be done by a single person, one
	// at a time.
	public static void printMaxActivities(int s[], int f[], int n) {
		int i, j;

		System.out.println("These activities are selected : ");

		i = 0;
		System.out.print(i + " ");

		// Consider rest of the activities
		for (j = 1; j < n; j++) {
			// If this activity has start time greater than or equal to the finish time of
			// previously selected activity, then select it
			if (s[j] >= f[i]) {
				System.out.print(j + " ");
				i = j;
			}
		}
	}

	public static void main(String[] args) {
		int start[] = { 1, 3, 0, 5, 8, 5 };
		int finish[] = { 3, 5, 6, 8, 9, 9 };
		int n = start.length;
		printMaxActivities(start, finish, n);
	}
}

Answer3
package greedyAssignment;

/*Q3. There are n gas stations along a circular route, where the amount of gas at the ith station is
gas[i].You have a car with an unlimited gas tank and it costs “cost[i]” of gas to travel from the
ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas
stations.Given two integer arrays gas and cost, return the starting gas station's index if you can
travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a
solution, it is guaranteed to be unique.
Example 1:
i/p : gas = [1,2,3,4,5], cost = [3,4,5,1,2]
o/p : 3
i/p : gas = [2,3,4], cost = [3,4,3]
o/p : -1
*/
public class Q3 {
	public static int canCompleteCircuit(int[] gas, int[] cost) {
		// Initialize totalGas and totalCost to 0
		int totalGas = 0, totalCost = 0;
		// Iterate through all the gas stations
		for (int i = 0; i < gas.length; i++) {
			// Add the gas and cost at each station to the total
			totalGas += gas[i];
			totalCost += cost[i];
		}
		// If totalCost is greater than totalGas, it is not possible to complete the
		// circuit
		if (totalGas < totalCost)
			return -1;

		// Initialize remainsGas and start to 0
		int remainsGas = 0, start = 0;
		// Iterate through all the gas stations
		for (int i = 0; i < gas.length; i++) {
			// Add the difference between gas and cost at each station to remainsGas
			remainsGas = remainsGas + (gas[i] - cost[i]);
			// If remainsGas becomes negative, set start to the next station and reset
			// remainsGas to 0
			if (remainsGas < 0) {
				start = i + 1;
				remainsGas = 0;
			}
		}
		// Return the starting station
		return start;
	}

	public static void main(String[] args) {
		int gas[] = { 1, 2, 3, 4, 5 };
		int cost[] = { 3, 4, 5, 1, 2 };
		System.out.println("The starting station is : " + canCompleteCircuit(gas, cost));
	}
}

Answer4
package greedyAssignment;

/*Q4. You have a long flowerbed in which some of the plots are planted, and some are not.
However, flowers cannot be planted in adjacent plots.Given an integer array flowerbed
containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n
new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.
Example 1:
i/p : flowerbed = [1,0,0,0,1], n = 1
o/p : true
i/p : flowerbed = [1,0,0,0,1], n = 2
o/p : false*/
public class Q4 {
	public static boolean canPlaceFlowers(int[] flowerbed, int n) {
		int count = 0;

		for (int i = 0; i < flowerbed.length; i++) {
			if (flowerbed[i] == 0) {
				int prev = (i == 0 || flowerbed[i - 1] == 0) ? 0 : 1;
				int next = (i == flowerbed.length - 1 || flowerbed[i + 1] == 0) ? 0 : 1;

				if (prev == 0 && next == 0) {
					flowerbed[i] = 1;
					count++;
				}
			}
		}
		return count >= n;
	}

	public static void main(String[] args) {
		int flowerbed[] = { 1, 0, 0, 0, 1 };
		int n = 1;
		System.out.println("The desired output is :  " + canPlaceFlowers(flowerbed, n));
	}
}

Answer5
package greedyAssignment;

import java.util.Arrays;

/*Q5. Given an array of intervals where intervals[i] = [starti, endi], return the minimum number of
intervals you need to remove to make the rest of the intervals non-overlapping.
i/p : intervals = [[1,2],[2,3],[3,4],[1,3]]
o/p : 1
Explanation-
[1,3] can be removed and the rest of the intervals are non-overlapping.

i/p : intervals = [[1,2],[1,2],[1,2]]
o/p : 2
Explanation-
You need to remove two [1,2] to make the rest of the intervals non-overlapping.

i/p : intervals = [[1,2],[2,3]]
o/p : 0
Explanation-
You don't need to remove any of the intervals since they're already non-overlapping.
*/
public class Q5 {
	public static int eraseOverlapIntervals(int[][] intervals) {
		Arrays.sort(intervals, (a, b) -> Integer.compare(a[1], b[1]));
		int[] curr = new int[] { intervals[0][0], intervals[0][1] };
		int maxCap = 1;
		for (int i = 1; i < intervals.length; i++) {
			if (intervals[i][0] < curr[1])
				continue;
			curr[0] = intervals[i][0];
			curr[1] = intervals[i][1];
			maxCap++;
		}
		return intervals.length - maxCap;
	}

	public static void main(String[] args) {
		int[][] intervals = { { 1, 2 }, { 2, 3 }, { 3, 4 }, { 1, 3 } };
		int n = 1;
		System.out.println("The desired output is :  " + eraseOverlapIntervals(intervals));
	}
}